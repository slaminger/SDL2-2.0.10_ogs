diff --git a/src/video/kmsdrm/SDL_kmsdrmopengles.c b/src/video/kmsdrm/SDL_kmsdrmopengles.c
index 9616c832f..18c00b305 100644
--- a/src/video/kmsdrm/SDL_kmsdrmopengles.c
+++ b/src/video/kmsdrm/SDL_kmsdrmopengles.c
@@ -33,6 +33,9 @@
 #define EGL_PLATFORM_GBM_MESA 0x31D7
 #endif
 
+extern rga_info_t src_info;
+extern rga_info_t dst_info;
+
 /* EGL implementation of SDL OpenGL support */
 
 int
@@ -60,7 +63,7 @@ KMSDRM_GLES_SetupCrtc(_THIS, SDL_Window * window) {
         return SDL_FALSE;
     }
 
-    fb_info = KMSDRM_FBFromBO(_this, wdata->crtc_bo);
+    fb_info = KMSDRM_FBFromBO(_this, vdata->rga_buffers[0]);
     if (fb_info == NULL) {
         return SDL_FALSE;
     }
@@ -96,10 +99,10 @@ KMSDRM_GLES_SwapWindow(_THIS, SDL_Window * window) {
     SDL_DisplayData *displaydata = (SDL_DisplayData *) SDL_GetDisplayForWindow(window)->driverdata;
     SDL_VideoData *vdata = ((SDL_VideoData *)_this->driverdata);
     KMSDRM_FBInfo *fb_info;
-    int ret;
+    int ret, timeout = 0;
+    struct gbm_bo* rga_buffer = NULL;
 
     /* Do we still need to wait for a flip? */
-    int timeout = 0;
     if (_this->egl_data->egl_swapinterval == 1) {
         timeout = -1;
     }
@@ -136,10 +139,24 @@ KMSDRM_GLES_SwapWindow(_THIS, SDL_Window * window) {
         SDL_LogDebug(SDL_LOG_CATEGORY_VIDEO, "Locked GBM surface %p", (void *)wdata->next_bo); */
     }
 
-    fb_info = KMSDRM_FBFromBO(_this, wdata->next_bo);
+    if (src_info.fd) {
+        close(src_info.fd);
+        src_info.fd = -1;
+    }
+    src_info.fd = KMSDRM_gbm_bo_get_fd(wdata->next_bo);
+    dst_info.fd = vdata->rga_buffer_prime_fds[vdata->rga_buffer_index];
+    if (c_RkRgaBlit(&src_info, &dst_info, NULL) < 0) {
+        SDL_LogError(SDL_LOG_CATEGORY_VIDEO,
+                        "Failed to rga blit\n");
+    }
+
+    rga_buffer = vdata->rga_buffers[vdata->rga_buffer_index];
+    fb_info = KMSDRM_FBFromBO(_this, rga_buffer);
     if (fb_info == NULL) {
         return 0;
     }
+    vdata->rga_buffer_index = (vdata->rga_buffer_index + 1) % RGA_BUFFERS_MAX;
+
     if (_this->egl_data->egl_swapinterval == 0) {
         /* Swap buffers instantly, possible tearing */
         /* SDL_LogDebug(SDL_LOG_CATEGORY_VIDEO, "drmModeSetCrtc(%d, %u, %u, 0, 0, &%u, 1, &%ux%u@%u)",
diff --git a/src/video/kmsdrm/SDL_kmsdrmsym.h b/src/video/kmsdrm/SDL_kmsdrmsym.h
index e34642350..c54a7b47d 100644
--- a/src/video/kmsdrm/SDL_kmsdrmsym.h
+++ b/src/video/kmsdrm/SDL_kmsdrmsym.h
@@ -88,6 +88,7 @@ SDL_KMSDRM_SYM(struct gbm_surface *,gbm_surface_create,(struct gbm_device *gbm,
 SDL_KMSDRM_SYM(void,gbm_surface_destroy,(struct gbm_surface *surf))
 SDL_KMSDRM_SYM(struct gbm_bo *,gbm_surface_lock_front_buffer,(struct gbm_surface *surf))
 SDL_KMSDRM_SYM(void,gbm_surface_release_buffer,(struct gbm_surface *surf, struct gbm_bo *bo))
+SDL_KMSDRM_SYM(int,gbm_bo_get_fd,(struct gbm_bo *bo))
 
 
 #undef SDL_KMSDRM_MODULE
diff --git a/src/video/kmsdrm/SDL_kmsdrmvideo.c b/src/video/kmsdrm/SDL_kmsdrmvideo.c
index 54f623e29..b428c5076 100644
--- a/src/video/kmsdrm/SDL_kmsdrmvideo.c
+++ b/src/video/kmsdrm/SDL_kmsdrmvideo.c
@@ -47,6 +47,9 @@
 
 #define KMSDRM_DRI_PATH "/dev/dri/"
 
+rga_info_t src_info = {0};
+rga_info_t dst_info = {0};
+
 static int
 check_modestting(int devindex)
 {
@@ -259,6 +262,41 @@ KMSDRM_FBDestroyCallback(struct gbm_bo *bo, void *data)
     SDL_free(fb_info);
 }
 
+static void
+KMSDRM_InitRotateBuffer(_THIS, int frameWidth, int frameHeight)
+{
+    // acquire new DRM PRIME buffer for rotate screen
+    SDL_VideoData *vdata = ((SDL_VideoData *)_this->driverdata);
+    // create buffers for RGA
+    for (int i = 0; i < RGA_BUFFERS_MAX; ++i)
+    {
+        vdata->rga_buffers[i] = KMSDRM_gbm_bo_create(vdata->gbm,
+              frameWidth, (frameHeight == 480) ? frameHeight : (frameHeight + 32) & ~31,
+              GBM_FORMAT_XRGB8888, GBM_BO_USE_SCANOUT | GBM_BO_USE_RENDERING);
+        assert(vdata->rga_buffers[i]);
+
+        vdata->rga_buffer_prime_fds[i] = KMSDRM_gbm_bo_get_fd(vdata->rga_buffers[i]);
+    }
+    vdata->rga_buffer_index = 0;
+
+    // initialize 2D raster graphic acceleration unit (RGA)
+    c_RkRgaInit();
+
+    // setup rotation
+    src_info.fd = -1;
+    src_info.mmuFlag = 1;
+    src_info.rotation = HAL_TRANSFORM_ROT_270;
+
+    // swap width and height here because our source buffer (user side render buffer) is 480x320 or 854x480
+    rga_set_rect(&src_info.rect, 0, 0, frameHeight, frameWidth, (frameHeight == 480) ? frameHeight : (frameHeight + 32) & ~31, frameWidth, RK_FORMAT_BGRA_8888);
+
+    dst_info.fd = -1;
+    dst_info.mmuFlag = 1;
+
+    // this is our hardware side destination buffer which has 320x480 or 480x854 portrait type LCD size
+    rga_set_rect(&dst_info.rect, 0, 0, frameWidth, frameHeight, frameWidth, frameHeight, RK_FORMAT_BGRA_8888);
+}
+
 KMSDRM_FBInfo *
 KMSDRM_FBFromBO(_THIS, struct gbm_bo *bo)
 {
@@ -479,8 +517,8 @@ KMSDRM_VideoInit(_THIS)
 
     SDL_zero(current_mode);
 
-    current_mode.w = data->cur_mode.hdisplay;
-    current_mode.h = data->cur_mode.vdisplay;
+    current_mode.w = data->cur_mode.vdisplay;
+    current_mode.h = data->cur_mode.hdisplay;
     current_mode.refresh_rate = data->cur_mode.vrefresh;
 
     /* FIXME ?
@@ -597,6 +635,7 @@ KMSDRM_CreateWindow(_THIS, SDL_Window * window)
 {
     SDL_WindowData *wdata;
     SDL_VideoDisplay *display;
+    SDL_DisplayData *data;
     SDL_VideoData *vdata = ((SDL_VideoData *)_this->driverdata);
     Uint32 surface_fmt, surface_flags;
 
@@ -660,6 +699,11 @@ KMSDRM_CreateWindow(_THIS, SDL_Window * window)
     SDL_SetKeyboardFocus(window);
 
     /* Window has been successfully created */
+
+    // init buffers for rotated screen with real size 320x480
+    data = display->driverdata;
+    KMSDRM_InitRotateBuffer(_this, data->cur_mode.hdisplay, data->cur_mode.vdisplay);
+
     return 0;
 
 error:
@@ -706,6 +750,7 @@ KMSDRM_DestroyWindow(_THIS, SDL_Window * window)
         }
         SDL_free(data);
         window->driverdata = NULL;
+        c_RkRgaDeInit();
     }
 }
 
diff --git a/src/video/kmsdrm/SDL_kmsdrmvideo.h b/src/video/kmsdrm/SDL_kmsdrmvideo.h
index 84adb6571..7c860947f 100644
--- a/src/video/kmsdrm/SDL_kmsdrmvideo.h
+++ b/src/video/kmsdrm/SDL_kmsdrmvideo.h
@@ -35,6 +35,10 @@
 #if SDL_VIDEO_OPENGL_EGL
 #include <EGL/egl.h>
 #endif
+#include <rga/RgaApi.h>
+#include <assert.h>
+
+#define RGA_BUFFERS_MAX (3)
 
 typedef struct SDL_VideoData
 {
@@ -46,6 +50,9 @@ typedef struct SDL_VideoData
     drmModeCrtc *saved_crtc;    /* Saved CRTC to restore on quit */
     uint32_t saved_conn_id;     /* Saved DRM connector ID */
     uint32_t crtc_id;           /* CRTC in use */
+    struct gbm_bo* rga_buffers[RGA_BUFFERS_MAX];
+    int rga_buffer_prime_fds[RGA_BUFFERS_MAX];
+    int rga_buffer_index;
 } SDL_VideoData;
 
 
